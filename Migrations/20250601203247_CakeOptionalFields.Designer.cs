// <auto-generated />
using System;
using Caker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Caker.Migrations
{
    [DbContext(typeof(CakerDbContext))]
    [Migration("20250601203247_CakeOptionalFields")]
    partial class CakeOptionalFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Caker.Models.Cake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("ConfectionerId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "confectioner_id");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double?>("Diameter")
                        .HasColumnType("double precision");

                    b.PrimitiveCollection<string[]>("Fillings")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "image_path");

                    b.Property<double>("ImageScale")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "image_scale");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_custom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int?>("ReqTime")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "required_time");

                    b.Property<string>("Taste")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<double?>("TextSize")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "text_size");

                    b.Property<double?>("TextX")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "text_x");

                    b.Property<double?>("TextY")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "text_y");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ConfectionerId");

                    b.ToTable("Cakes");
                });

            modelBuilder.Entity("Caker.Models.Confectioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BalanceAvailable")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "balance_available");

                    b.Property<int>("BalanceFreezed")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "balance_freezed");

                    b.Property<bool>("DoCustom")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "do_custom");

                    b.Property<bool>("DoImages")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "do_images");

                    b.Property<bool>("DoShapes")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "do_shapes");

                    b.PrimitiveCollection<string[]>("Fillings")
                        .HasColumnType("text[]");

                    b.Property<double>("MaxDiameter")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "max_diameter");

                    b.Property<int>("MaxEta")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "max_eta");

                    b.Property<double>("MinDiameter")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "min_diameter");

                    b.Property<int>("MinEta")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "min_eta");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Confectioners");
                });

            modelBuilder.Entity("Caker.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Caker.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CakeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "cake_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "creation_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_custom");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "order_status");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CakeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Caker.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "user_id");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");

                    b.HasAnnotation("Relational:JsonPropertyName", "refresh_tokens");
                });

            modelBuilder.Entity("Caker.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "phone_number");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Caker.Models.Cake", b =>
                {
                    b.HasOne("Caker.Models.Confectioner", "Confectioner")
                        .WithMany("Cakes")
                        .HasForeignKey("ConfectionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Confectioner");
                });

            modelBuilder.Entity("Caker.Models.Confectioner", b =>
                {
                    b.HasOne("Caker.Models.User", "User")
                        .WithOne("Confectioner")
                        .HasForeignKey("Caker.Models.Confectioner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Caker.Models.Customer", b =>
                {
                    b.HasOne("Caker.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Caker.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Caker.Models.Order", b =>
                {
                    b.HasOne("Caker.Models.Cake", "Cake")
                        .WithMany("Orders")
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Caker.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Caker.Models.RefreshToken", b =>
                {
                    b.HasOne("Caker.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Caker.Models.Cake", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Caker.Models.Confectioner", b =>
                {
                    b.Navigation("Cakes");
                });

            modelBuilder.Entity("Caker.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Caker.Models.User", b =>
                {
                    b.Navigation("Confectioner");

                    b.Navigation("Customer");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
